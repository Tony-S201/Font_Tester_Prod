{"version":3,"sources":["Arial.js","Footer.js","FontList.js","App.js","serviceWorker.js","index.js"],"names":["Arial","state","myText","undefined","handleChange","event","writeText","target","value","setState","this","props","currentFontComponent","currentFontWeight","themeFontColor","colorPicker","currentSize","currentFontStyle","id","style","color","fontFamily","onChange","fontWeight","fontSize","fontStyle","DOMPurify","sanitize","Component","Footer","FontList","font","App","inputBackgroundColor","currentLogo","onChangeFont","console","log","charAt","toUpperCase","slice","onChangeFontWeight","onChangeTheme","checked","document","body","backgroundColor","onChangeFontStyle","onPickerChange","hex","onSizeChange","Option","Select","src","className","alt","type","showSearch","width","dropdownStyle","placeholder","optionFilterProp","onFocus","onBlur","onSearch","filterOption","input","option","children","toLowerCase","indexOf","map","thefont","key","defaultValue","max","onChangeComplete","disableAlpha","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAoDeA,E,2MApCbC,MAAQ,CACNC,YAAQC,G,EAGVC,aAAe,SAACC,GACd,IAAIC,EAAYD,EAAME,OAAOC,MAC7B,EAAKC,SAAS,CAACP,OAAQI,K,wEAGf,IAAD,EACyGI,KAAKC,MAA7GC,EADD,EACCA,qBAAsBC,EADvB,EACuBA,kBAAmBC,EAD1C,EAC0CA,eAAgBC,EAD1D,EAC0DA,YAAaC,EADvE,EACuEA,YAAaC,EADpF,EACoFA,iBACnFf,EAAWQ,KAAKT,MAAhBC,OACR,OACE,oCACE,yBAAKgB,GAAG,aACJ,yBAAKA,GAAG,cACJ,wBAAIC,MAAO,CAACC,MAAON,EAAgBO,WAAY,uBAA/C,mBACA,8BACEC,SAAUZ,KAAKN,gBAGrB,yBAAKc,GAAG,eACJ,wBAAIC,MAAO,CAACC,MAAON,EAAgBO,WAAY,uBAA/C,gBAAmF,0BAAMF,MAAO,CAACE,WAAW,GAAD,OAAKT,EAAL,gBAAyCQ,MAAON,IAAkBF,IAC7K,yBAAKM,GAAG,SAASC,MAAO,CAACE,WAAW,GAAD,OAAKT,EAAL,gBAAyCW,WAAYV,EAAmBO,MAAOL,EAAaS,SAAS,GAAD,OAAKR,EAAL,MAAsBS,UAAWR,IACrKS,IAAUC,SAASzB,W,GAzBlB0B,aCGLC,EATA,WACX,OACI,mECXKC,EAAW,CACpB,CACIC,KAAM,SAEV,CACIA,KAAM,WAEV,CACIA,KAAM,eC6JCC,E,2MAnJb/B,MAAQ,CACNW,0BAAsBT,EACtBU,uBAAoBV,EACpBW,eAAiB,UACjBmB,qBAAsB,UACtBlB,iBAAaZ,EACba,iBAAcb,EACdc,sBAAkBd,EAClB+B,YAAa,M,EAIfC,aAAe,SAAA3B,GACb4B,QAAQC,IAAR,mBAAwB7B,IACxB,IAAII,EAAuBJ,EAAM8B,OAAO,GAAGC,cAAgB/B,EAAMgC,MAAM,GACvE,EAAK/B,SAAS,CAAEG,0B,EAGlB6B,mBAAqB,SAAAjC,GACnB,IAAIK,EAAoBL,EACxB,EAAKC,SAAS,CAAEI,uB,EAGlB6B,cAAgB,SAAAC,IACE,IAAZA,GACFC,SAASC,KAAK1B,MAAM2B,gBAAkB,UACtC,EAAKrC,SAAS,CAACK,eAAgB,UAAWmB,qBAAsB,UAAWC,YAAa,SAExFU,SAASC,KAAK1B,MAAM2B,gBAAkB,UACtC,EAAKrC,SAAS,CAACK,eAAgB,UAAWmB,qBAAsB,UAAWC,YAAa,U,EAI5Fa,kBAAoB,SAAAvC,GAClB,IAAIS,EAAmBT,EACvB,EAAKC,SAAS,CAAEQ,sB,EAGlB+B,eAAiB,SAAC5B,GAChB,EAAKX,SAAS,CAACM,YAAaK,EAAM6B,O,EAGpCC,aAAe,SAAC1C,GACd,EAAKC,SAAS,CAACO,YAAaR,K,wEAGnB,IACD2C,EAAWC,IAAXD,OADA,EAE2IzC,KAAKT,MAAhJW,EAFA,EAEAA,qBAAsBC,EAFtB,EAEsBA,kBAAmBC,EAFzC,EAEyCA,eAAgBmB,EAFzD,EAEyDA,qBAAsBlB,EAF/E,EAE+EA,YAAaC,EAF5F,EAE4FA,YAAaC,EAFzG,EAEyGA,iBAFzG,EAE2HiB,YACnI,OACE,yBAAKhB,GAAG,eACN,yBAAKmC,IAAI,kBAAkBC,UAAU,WAAWC,IAAI,iBACpD,yBAAKD,UAAU,eACb,4BAAQpC,GAAG,cAAcC,MAAO,CAACC,MAAON,EAAgBO,WAAY,uBAApE,iBACA,kBAAC,IAAD,CAAQC,SAAUZ,KAAKgC,iBAGzB,wBAAIxB,GAAG,WAAWC,MAAO,CAACC,MAAON,EAAgBO,WAAY,uBAA7D,uCAEA,yBAAKH,GAAG,cACN,yBAAKoC,UAAU,iBACb,4BAAQnC,MAAO,CAACC,MAAON,IAAiB,kBAAC,IAAD,CAAM0C,KAAK,YAEnD,kBAAC,IAAD,CACEC,YAAU,EACVtC,MAAO,CAAEuC,MAAO,KAChBC,cAAe,CAACb,gBAAiBb,GACjC2B,YAAY,gBACZC,iBAAiB,WACjBvC,SAAUZ,KAAKyB,aACf2B,QAASpD,KAAKoD,QACdC,OAAQrD,KAAKqD,OACbC,SAAUtD,KAAKsD,SACfC,aAAc,SAACC,EAAOC,GAAR,OACdA,EAAOxD,MAAMyD,SAASC,cAAcC,QAAQJ,EAAMG,gBAAkB,IAGnEvC,EAASyC,IAAI,SAAAC,GAAO,OACnB,kBAACrB,EAAD,CAAQsB,IAAKD,EAAQzC,KAAMvB,MAAOgE,EAAQzC,KAAMZ,MAAO,CAACE,WAAW,GAAD,OAAKmD,EAAQzC,KAAb,gBAAiCR,WAAW,GAAD,OAAKV,GAAqBO,MAAON,IAAkB0D,EAAQzC,UAI9K,yBAAKuB,UAAU,iBACb,4BAAQnC,MAAO,CAACC,MAAON,IAAiB,kBAAC,IAAD,CAAM0C,KAAK,UACnD,kBAAC,IAAD,CACEC,YAAU,EACVtC,MAAO,CAAEuC,MAAO,KAChBC,cAAe,CAACb,gBAAiBb,GACjC2B,YAAY,uBACZC,iBAAiB,WACjBvC,SAAUZ,KAAK+B,mBACfqB,QAASpD,KAAKoD,QACdC,OAAQrD,KAAKqD,OACbC,SAAUtD,KAAKsD,SACfC,aAAc,SAACC,EAAOC,GAAR,OACdA,EAAOxD,MAAMyD,SAASC,cAAcC,QAAQJ,EAAMG,gBAAkB,IAGpE,kBAAClB,EAAD,CAAQ3C,MAAM,SAASW,MAAO,CAACI,WAAY,SAAUH,MAAON,IAA5D,UACA,kBAACqC,EAAD,CAAQ3C,MAAM,OAAOW,MAAO,CAACI,WAAY,OAAQH,MAAON,IAAxD,UAGJ,yBAAKwC,UAAU,iBACb,4BAAQnC,MAAO,CAACC,MAAON,IAAiB,kBAAC,IAAD,CAAM0C,KAAK,YACnD,kBAAC,IAAD,CACEC,YAAU,EACVtC,MAAO,CAAEuC,MAAO,KAChBC,cAAe,CAACb,gBAAiBb,GACjC2B,YAAY,sBACZC,iBAAiB,WACjBvC,SAAUZ,KAAKqC,kBACfe,QAASpD,KAAKoD,QACdC,OAAQrD,KAAKqD,OACbC,SAAUtD,KAAKsD,SACfC,aAAc,SAACC,EAAOC,GAAR,OACdA,EAAOxD,MAAMyD,SAASC,cAAcC,QAAQJ,EAAMG,gBAAkB,IAGpE,kBAAClB,EAAD,CAAQ3C,MAAM,SAASW,MAAO,CAACM,UAAW,SAAUL,MAAON,IAA3D,QACA,kBAACqC,EAAD,CAAQ3C,MAAM,SAASW,MAAO,CAACM,UAAW,SAAUL,MAAON,IAA3D,aAKN,yBAAKI,GAAG,eACN,4BAAQC,MAAO,CAACC,MAAON,IAAiB,kBAAC,IAAD,CAAM0C,KAAK,eACnD,kBAAC,IAAD,CAAQkB,aAAc,GAAIC,IAAK,GAAIrD,SAAUZ,KAAKwC,gBAGpD,yBAAKhC,GAAG,cACN,yBAAKA,GAAG,YACN,0BAAMC,MAAO,CAACC,MAAON,EAAgBO,WAAY,uBAAjD,gBACA,kBAAC,eAAD,CAAcuD,iBAAkBlE,KAAKsC,eAAgB5B,MAAOL,EAAa8D,cAAY,KAEvF,kBAAC,EAAD,CAAOjE,qBAAsBA,EAAsBC,kBAAmBA,EAAmBC,eAAgBA,EAAgBC,YAAaA,EAAaC,YAAaA,EAAaC,iBAAkBA,KAGjM,kBAAC,EAAD,W,GA1IUW,aCLEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxC,SAASyC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5c085dbd.chunk.js","sourcesContent":["/**\n * NPM Import\n */\nimport React, { Component } from 'react';\nimport DOMPurify from 'dompurify'; \n\n/**\n * LOCAL Import\n */\n\n\n/**\n * CODE Here\n */\n\nclass Arial extends Component {\n  state = {\n    myText: undefined,\n  }\n\n  handleChange = (event) => {\n    let writeText = event.target.value;\n    this.setState({myText: writeText})\n  }\n\n  render() {\n    const { currentFontComponent, currentFontWeight, themeFontColor, colorPicker, currentSize, currentFontStyle } = this.props\n    const { myText } = this.state\n    return (\n      <>\n        <div id=\"rightSide\">\n            <div id=\"resultLeft\">\n                <h2 style={{color: themeFontColor, fontFamily: 'Roboto, sans-serif'}}>Write your text</h2>\n                <textarea \n                  onChange={this.handleChange}\n                />\n            </div>\n            <div id=\"resultRight\">\n                <h2 style={{color: themeFontColor, fontFamily: 'Roboto, sans-serif'}}>Your text in <span style={{fontFamily: `${currentFontComponent}, sans-serif`, color: themeFontColor}}>{currentFontComponent}</span></h2>\n                <div id=\"result\" style={{fontFamily: `${currentFontComponent}, sans-serif`, fontWeight: currentFontWeight, color: colorPicker, fontSize: `${currentSize}px`, fontStyle: currentFontStyle}}>\n                  {DOMPurify.sanitize(myText)}\n                </div>\n            </div>\n        </div>\n      </>\n    )\n  }\n}\n\n /**\n* Export\n*/\nexport default Arial;\n","/**\n * NPM Import\n */\nimport React from 'react';\n\n/**\n * CODE Here\n */\n\nconst Footer = () => {\n    return (\n        <footer>CopyrightÂ© Tony Swierz 2019</footer>\n    )\n}\n\n /**\n* Export\n*/\nexport default Footer;\n","export const FontList = [\n    {\n        font: 'Arial'\n    },\n    {\n        font: 'Courier'\n    },\n    {\n        font: 'Fjalla One'\n    },\n]","/**\n * NPM Import\n */\nimport React, { Component } from 'react';\nimport { Select, Switch, Slider, Icon } from 'antd';\nimport { SketchPicker } from 'react-color';\n/**\n * LOCAL Import\n */\nimport './App.css';\nimport Arial from './Arial';\nimport Footer from './Footer';\nimport { FontList } from './FontList';\n\n/**\n * CODE Here\n */\nclass App extends Component {\n  state = {\n    currentFontComponent: undefined,\n    currentFontWeight : undefined,\n    themeFontColor : '#000000',\n    inputBackgroundColor: '#FFFFFF',\n    colorPicker: undefined,\n    currentSize : undefined,\n    currentFontStyle: undefined,\n    currentLogo: 'on',\n  }  \n  \n  // Add the select option value to the state at currentFont\n  onChangeFont = value => {\n    console.log(`selected ${value}`)\n    let currentFontComponent = value.charAt(0).toUpperCase() + value.slice(1);\n    this.setState({ currentFontComponent })\n  }\n  \n  onChangeFontWeight = value => {\n    let currentFontWeight = value;\n    this.setState({ currentFontWeight })\n  }\n  \n  onChangeTheme = checked => {\n    if (checked === false) {\n      document.body.style.backgroundColor = '#FFFFFF';\n      this.setState({themeFontColor: '#000000', inputBackgroundColor: '#FFFFFF', currentLogo: 'on'});\n    } else {\n      document.body.style.backgroundColor = '#2F2E33';\n      this.setState({themeFontColor: '#FFFFFF', inputBackgroundColor: '#2F2E33', currentLogo: 'off'});\n    }\n  }\n\n  onChangeFontStyle = value => {\n    let currentFontStyle = value;\n    this.setState({ currentFontStyle })\n  }\n\n  onPickerChange = (color) => {\n    this.setState({colorPicker: color.hex})\n  }\n\n  onSizeChange = (value) => {\n    this.setState({currentSize: value})\n  }\n\n  render () {\n    const { Option } = Select\n    const { currentFontComponent, currentFontWeight, themeFontColor, inputBackgroundColor, colorPicker, currentSize, currentFontStyle, currentLogo } = this.state    \n    return (\n      <div id=\"big-wrapper\">\n        <img src=\"font_tester.png\" className=\"bigImage\" alt=\"website logo\" />\n        <div className=\"switchTheme\">\n          <strong id=\"switchTheme\" style={{color: themeFontColor, fontFamily: 'Roboto, sans-serif'}}>Switch theme </strong>\n          <Switch onChange={this.onChangeTheme} />\n        </div>\n\n        <h2 id=\"subtitle\" style={{color: themeFontColor, fontFamily: 'Roboto, sans-serif'}}>A selection of my favorites fonts !</h2>\n\n        <div id=\"selectList\">\n          <div className=\"selectElement\">\n            <strong style={{color: themeFontColor}}><Icon type=\"medium\" /></strong>\n            {/* This is the Select from antd, onChange with option choice execute the onChange function */}\n            <Select\n              showSearch\n              style={{ width: 200}}\n              dropdownStyle={{backgroundColor: inputBackgroundColor}}\n              placeholder=\"Select a font\"\n              optionFilterProp=\"children\"\n              onChange={this.onChangeFont}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n              onSearch={this.onSearch}\n              filterOption={(input, option) =>\n              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {FontList.map(thefont => (\n                <Option key={thefont.font} value={thefont.font} style={{fontFamily: `${thefont.font}, sans-serif`, fontWeight: `${currentFontWeight}`, color: themeFontColor}}>{thefont.font}</Option>\n              ))}\n            </Select>\n          </div>\n          <div className=\"selectElement\">\n            <strong style={{color: themeFontColor}}><Icon type=\"bold\" /></strong>  \n            <Select\n              showSearch\n              style={{ width: 200 }}\n              dropdownStyle={{backgroundColor: inputBackgroundColor}}\n              placeholder=\"Select a font-weight\"\n              optionFilterProp=\"children\"\n              onChange={this.onChangeFontWeight}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n              onSearch={this.onSearch}\n              filterOption={(input, option) =>\n              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              <Option value=\"normal\" style={{fontWeight: 'normal', color: themeFontColor}}>Normal</Option>\n              <Option value=\"bold\" style={{fontWeight: 'bold', color: themeFontColor}}>Bold</Option>\n            </Select>\n          </div>\n          <div className=\"selectElement\">\n            <strong style={{color: themeFontColor}}><Icon type=\"italic\" /></strong>  \n            <Select\n              showSearch\n              style={{ width: 200 }}\n              dropdownStyle={{backgroundColor: inputBackgroundColor}}\n              placeholder=\"Select a font-style\"\n              optionFilterProp=\"children\"\n              onChange={this.onChangeFontStyle}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n              onSearch={this.onSearch}\n              filterOption={(input, option) =>\n              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              <Option value=\"normal\" style={{fontStyle: 'normal', color: themeFontColor}}>None</Option>\n              <Option value=\"italic\" style={{fontStyle: 'italic', color: themeFontColor}}>Italic</Option>\n            </Select>\n          </div>\n        </div>\n\n        <div id=\"sizeElement\">\n          <strong style={{color: themeFontColor}}><Icon type=\"font-size\" /></strong>\n          <Slider defaultValue={14} max={48} onChange={this.onSizeChange} />\n        </div>\n  \n        <div id=\"bottomZone\">\n          <div id=\"leftSide\">\n            <span style={{color: themeFontColor, fontFamily: 'Roboto, sans-serif'}}>Pick a color</span>\n            <SketchPicker onChangeComplete={this.onPickerChange} color={colorPicker} disableAlpha />\n          </div>\n          <Arial currentFontComponent={currentFontComponent} currentFontWeight={currentFontWeight} themeFontColor={themeFontColor} colorPicker={colorPicker} currentSize={currentSize} currentFontStyle={currentFontStyle} /> \n        </div>\n\n        <Footer />\n\n      </div>\n    )\n  }\n}\n\n /**\n* Export\n*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}